#install.packages("DT")
library(dplyr)
library(purrr)
library(DT)
# Assuming your data frame is named df
total_rows <- nrow(df)
# Build column-wise summary
column_summary <- purrr::map_dfr(names(df), function(col) {
column_data <- df[[col]]
data_type <- class(column_data)[1]
null_count <- sum(is.na(column_data))
null_percent <- round((null_count / total_rows) * 100, 2)
unique_count <- n_distinct(column_data)
example_value <- as.character(column_data[which(!is.na(column_data))[1]])
mode_value <- as.character(names(sort(table(column_data), decreasing = TRUE))[1])
tibble(
Column = col,
Type = data_type,
Mode = mode_value,
Nulls = null_count,
`% Null` = null_percent,
Unique = unique_count,
Example = example_value
)
})
# Arrange by % Null descending (optional)
column_summary <- column_summary %>% arrange(desc(`% Null`))
dim(sample)
dim(test)
dim(train)
#str(train)
#glimpse(train)
#summary(train)
#install.packages("dplyr")
#install.packages("DT")
library(dplyr)
library(purrr)
library(DT)
# Assuming your data frame is named df
total_rows <- nrow(df)
# Build column-wise summary
column_summary <- purrr::map_dfr(names(df), function(col) {
column_data <- df[[col]]
data_type <- class(column_data)[1]
null_count <- sum(is.na(column_data))
null_percent <- round((null_count / total_rows) * 100, 2)
unique_count <- n_distinct(column_data)
example_value <- as.character(column_data[which(!is.na(column_data))[1]])
mode_value <- as.character(names(sort(table(column_data), decreasing = TRUE))[1])
tibble(
Column = col,
Type = data_type,
Mode = mode_value,
Nulls = null_count,
`% Null` = null_percent,
Unique = unique_count,
Example = example_value
)
})
# Arrange by % Null descending (optional)
column_summary <- column_summary %>% arrange(desc(`% Null`))
dim(sample)
dim(test)
dim(train)
#str(train)
#glimpse(train)
#summary(train)
#install.packages("dplyr")
#install.packages("DT")
library(dplyr)
library(purrr)
library(DT)
# Replace with the name of your dataset if not yet defined
# df <- train  # <- for example
total_rows <- nrow(df)
# Build column-wise summary
column_summary <- purrr::map_dfr(names(df), function(col) {
column_data <- df[[col]]
data_type <- class(column_data)[1]
null_count <- sum(is.na(column_data))
null_percent <- round((null_count / total_rows) * 100, 2)
unique_count <- n_distinct(column_data)
# Safe fallbacks
example_value <- if (all(is.na(column_data))) NA_character_ else as.character(na.omit(column_data)[1])
mode_value <- if (all(is.na(column_data))) NA_character_ else as.character(names(sort(table(column_data), decreasing = TRUE))[1])
tibble(
Column = col,
Type = data_type,
Mode = mode_value,
Nulls = null_count,
NullPercent = null_percent,  # ✅ safer name
Unique = unique_count,
Example = example_value
)
})
# ✅ Arrange safely
column_summary <- column_summary %>% arrange(desc(NullPercent))
dim(sample)
dim(test)
dim(train)
#str(train)
#glimpse(train)
#summary(train)
#install.packages("dplyr")
#install.packages("DT")
library(dplyr)
library(purrr)
library(DT)
# Replace with the name of your dataset if not yet defined
# df <- train  # <- for example
total_rows <- nrow(df)
# Build column-wise summary
column_summary <- purrr::map_dfr(names(df), function(col) {
column_data <- df[[col]]
data_type <- class(column_data)[1]
null_count <- sum(is.na(column_data))
null_percent <- round((null_count / total_rows) * 100, 2)
unique_count <- n_distinct(column_data)
# Safe fallbacks
example_value <- if (all(is.na(column_data))) NA_character_ else as.character(na.omit(column_data)[1])
mode_value <- if (all(is.na(column_data))) NA_character_ else as.character(names(sort(table(column_data), decreasing = TRUE))[1])
tibble(
Column = col,
Type = data_type,
Mode = mode_value,
Nulls = null_count,
NullPercent = null_percent,  # ✅ safer name
Unique = unique_count,
Example = example_value
)
})
# ✅ Arrange safely
column_summary <- column_summary %>% arrange(desc(NullPercent))
# ✅ Arrange safely
column_summary <- column_summary %>% arrange(desc(.data[["NullPercent"]]))
dim(train)
library(dplyr)
library(purrr)
library(DT)
total_rows <- nrow(df)
# Build column-wise summary
column_summary <- purrr::map_dfr(names(df), function(col) {
column_data <- df[[col]]
data_type <- class(column_data)[1]
null_count <- sum(is.na(column_data))
null_percent <- round((null_count / total_rows) * 100, 2)
unique_count <- n_distinct(column_data)
# Safe fallbacks
example_value <- if (all(is.na(column_data))) NA_character_ else as.character(na.omit(column_data)[1])
mode_value <- if (all(is.na(column_data))) NA_character_ else as.character(names(sort(table(column_data), decreasing = TRUE))[1])
tibble(
Column = col,
Type = data_type,
Mode = mode_value,
Nulls = null_count,
NullPercent = null_percent,  # ✅ safer name
Unique = unique_count,
Example = example_value
)
})
# ✅ Arrange safely
column_summary <- column_summary %>% arrange(desc(.data[["NullPercent"]]))
dim(sample)
dim(test)
dim(train)
library(dplyr)
library(purrr)
library(DT)
total_rows <- nrow(df)
# Build column-wise summary
column_summary <- purrr::map_dfr(names(df), function(col) {
column_data <- df[[col]]
data_type <- class(column_data)[1]
null_count <- sum(is.na(column_data))
null_percent <- round((null_count / total_rows) * 100, 2)
unique_count <- n_distinct(column_data)
# Safe fallbacks
example_value <- if (all(is.na(column_data))) NA_character_ else as.character(na.omit(column_data)[1])
mode_value <- if (all(is.na(column_data))) NA_character_ else as.character(names(sort(table(column_data), decreasing = TRUE))[1])
tibble(
Column = col,
Type = data_type,
Mode = mode_value,
Nulls = null_count,
NullPercent = null_percent,  # ✅ safer name
Unique = unique_count,
Example = example_value
)
})
# ✅ Arrange safely
column_summary <- column_summary %>% arrange(desc(.data[["NullPercent"]]))
# Count values in p_num (if exists)
if ("p_num" %in% colnames(df)) {
pnum_counts <- table(df$p_num)
print(unique(df$p_num))
}
# Display summary
DT::datatable(
column_summary,
options = list(pageLength = 100),
rownames = TRUE
)
tibble(
Column = col,
Type = data_type,
Mode = mode_value,
Nulls = null_count,
`% Null` = null_percent,
Unique = unique_count,
Example = example_value
)
library(dplyr)
library(purrr)
library(DT)
# Assuming your data frame is named df
total_rows <- nrow(df)
# Build column-wise summary
column_summary <- purrr::map_dfr(names(df), function(col) {
column_data <- df[[col]]
data_type <- class(column_data)[1]
null_count <- sum(is.na(column_data))
null_percent <- round((null_count / total_rows) * 100, 2)
unique_count <- n_distinct(column_data)
example_value <- as.character(column_data[which(!is.na(column_data))[1]])
mode_value <- as.character(names(sort(table(column_data), decreasing = TRUE))[1])
tibble(
Column = col,
Type = data_type,
Mode = mode_value,
Nulls = null_count,
`% Null` = null_percent,
Unique = unique_count,
Example = example_value
)
})
# Arrange by % Null descending (optional)
column_summary <- column_summary %>% arrange(desc(`% Null`))
# Arrange by % Null descending (optional)
column_summary <- column_summary %>% arrange(desc(`%_Null`))
tibble(
Column = col,
Type = data_type,
Mode = mode_value,
Nulls = null_count,
NullPercent = null_percent,   # ✅ Safe name
Unique = unique_count,
Example = example_value
)
# Build column-wise summary
column_summary <- purrr::map_dfr(names(df), function(col) {
column_data <- df[[col]]
data_type <- class(column_data)[1]
null_count <- sum(is.na(column_data))
null_percent <- round((null_count / total_rows) * 100, 2)
unique_count <- n_distinct(column_data)
example_value <- as.character(column_data[which(!is.na(column_data))[1]])
mode_value <- as.character(names(sort(table(column_data), decreasing = TRUE))[1])
tibble(
Column = col,
Type = data_type,
Mode = mode_value,
Nulls = null_count,
NullPercent = null_percent,   # ✅ Safe name
Unique = unique_count,
Example = example_value
)
})
# Arrange by % Null descending (optional)
column_summary <- column_summary %>% arrange(desc(NullPercent))
---
title: "P"
dim(sample)
dim(test)
dim(train)
#str(train)
#glimpse(train)
#summary(train)
#install.packages("dplyr")
#install.packages("DT")
library(dplyr)
library(purrr)
library(DT)
# Assuming your data frame is named df
total_rows <- nrow(df)
# Build column-wise summary
column_summary <- purrr::map_dfr(names(df), function(col) {
column_data <- df[[col]]
data_type <- class(column_data)[1]
null_count <- sum(is.na(column_data))
null_percent <- round((null_count / total_rows) * 100, 2)
unique_count <- n_distinct(column_data)
example_value <- as.character(column_data[which(!is.na(column_data))[1]])
mode_value <- as.character(names(sort(table(column_data), decreasing = TRUE))[1])
tibble(
Column = col,
Type = data_type,
Mode = mode_value,
Nulls = null_count,
NullPercent = null_percent,   # ✅ Safe name
Unique = unique_count,
Example = example_value
)
})
# Arrange by % Null descending (optional)
column_summary <- column_summary %>% arrange(desc(NullPercent))
print(names(column_summary))
library(dplyr)
library(purrr)
library(DT)
# Assuming your data frame is named df
total_rows <- nrow(df)
# Build column-wise summary
column_summary <- purrr::map_dfr(names(df), function(col) {
column_data <- df[[col]]
data_type <- class(column_data)[1]
null_count <- sum(is.na(column_data))
null_percent <- round((null_count / total_rows) * 100, 2)
unique_count <- n_distinct(column_data)
example_value <- as.character(column_data[which(!is.na(column_data))[1]])
mode_value <- as.character(names(sort(table(column_data), decreasing = TRUE))[1])
tibble(
Column = col,
Type = data_type,
Mode = mode_value,
Nulls = null_count,
NullPercent = null_percent,   # ✅ Safe name
Unique = unique_count,
Example = example_value
)
})
print(names(column_summary))
dim(sample)
dim(test)
dim(train)
#str(train)
#glimpse(train)
#summary(train)
#install.packages("dplyr")
#install.packages("DT")
library(dplyr)
library(purrr)
library(DT)
# Assuming your data frame is named df
df<-train
total_rows <- nrow(df)
# Build column-wise summary
column_summary <- purrr::map_dfr(names(df), function(col) {
column_data <- df[[col]]
data_type <- class(column_data)[1]
null_count <- sum(is.na(column_data))
null_percent <- round((null_count / total_rows) * 100, 2)
unique_count <- n_distinct(column_data)
example_value <- as.character(column_data[which(!is.na(column_data))[1]])
mode_value <- as.character(names(sort(table(column_data), decreasing = TRUE))[1])
tibble(
Column = col,
Type = data_type,
Mode = mode_value,
Nulls = null_count,
`% Null` = null_percent,
Unique = unique_count,
Example = example_value
)
})
# Arrange by % Null descending (optional)
column_summary <- column_summary %>% arrange(desc(`% Null`))
# Count values in p_num
pnum_counts <- table(df$p_num)
print(unique(df$p_num))
# Print full summary
DT::datatable(
column_summary,
options = list(pageLength = 100),  # Show 100 rows per page
rownames = TRUE
)
df_full <- bind_rows(train, test)
dim(df_full)
# install.packages("dplyr")
library(dplyr)
df_full2 <- df_full %>% full_join(sample, by = "id")
head(df_full2)
dim(df_full2)
# Load necessary library
library(dplyr)
df <- df_full
total_rows <- nrow(df)
# Null summary: count, percentage, and non-null percentage
null_counts <- colSums(is.na(df))
non_null_counts <- total_rows - null_counts
null_percentages <- round(null_counts / total_rows * 100, 2)
non_null_percentages <- round(non_null_counts / total_rows * 100, 2)
# Combine into a data frame
null_summary <- data.frame(
Column = names(null_counts),
Null_Count = null_counts,
Non_Null_Count = non_null_counts,
Null_Percentage = null_percentages,
Non_Null_Percentage = non_null_percentages,
Possible_to_Delete = null_percentages > 50
)
# Sort by percentage of nulls descending
null_summary_sorted <- null_summary %>%
arrange(desc(Null_Percentage))
# Show result
print(null_summary_sorted)
# check duplicates
# View duplicated values in the id column
duplicated_ids <- df %>%filter(duplicated(id))
# Show how many duplicated IDs
num_duplicates <- nrow(duplicated_ids)
cat("🔁 Number of duplicated IDs:", num_duplicates, "\n")
# Show them
print(duplicated_ids)
# Unique duplicated id values
duplicate_id_values <- df$id[duplicated(df$id)] %>% unique()
print(duplicate_id_values)
library(dplyr)
# Select numeric columns
numeric_df <- df %>% select(where(is.numeric))
# Loop over each numeric column
for (col_name in names(numeric_df)) {
col_data <- numeric_df[[col_name]]
# Set up 2 plots side by side in the RStudio viewer
par(mfrow = c(1, 2), mar = c(4, 4, 3, 1))
# Boxplot
boxplot(
col_data,
main = paste("Boxplot -", col_name),
col = "orange",
horizontal = TRUE
)
# Histogram
hist(
col_data,
main = paste("Histogram -", col_name),
xlab = col_name,
col = "skyblue",
breaks = 50
)
# readline(prompt = "Press [Enter] to continue...")
Sys.sleep(0.5)  # Pause for 0.5 seconds
}
# Load libraries
library(dplyr)
# Define function to detect outliers using IQR
detect_outliers <- function(data, column) {
Q1 <- quantile(data[[column]], 0.25, na.rm = TRUE)
Q3 <- quantile(data[[column]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Return rows where the value is an outlier
data %>%
filter((.data[[column]] < lower_bound | .data[[column]] > upper_bound) & !is.na(.data[[column]]))
}
# Create a named list to store outlier counts
outlier_counts <- list()
# Loop over numeric columns
numeric_columns <- df %>% select(where(is.numeric)) %>% names()
for (col in numeric_columns) {
outliers <- detect_outliers(df, col)
outlier_counts[[col]] <- nrow(outliers)
}
# Convert to data frame for easier viewing
outlier_summary <- data.frame(
Column = names(outlier_counts),
Outlier_Count = unlist(outlier_counts)
)
# Sort descending
outlier_summary <- outlier_summary %>%
arrange(desc(Outlier_Count))
# Print full summary
DT::datatable(
outlier_summary,
options = list(pageLength = 100),  # Show 100 rows per page
rownames = TRUE
)
# Load libraries
library(dplyr)
# Define function to detect outliers using IQR
detect_outliers <- function(data, column) {
Q1 <- quantile(data[[column]], 0.25, na.rm = TRUE)
Q3 <- quantile(data[[column]], 0.75, na.rm = TRUE)
IQR <- Q3 - Q1
lower_bound <- Q1 - 1.5 * IQR
upper_bound <- Q3 + 1.5 * IQR
# Return rows where the value is an outlier
data %>%
filter((.data[[column]] < lower_bound | .data[[column]] > upper_bound) & !is.na(.data[[column]]))
}
# Create a named list to store outlier counts
outlier_counts <- list()
# Loop over numeric columns
numeric_columns <- df %>% select(where(is.numeric)) %>% names()
for (col in numeric_columns) {
outliers <- detect_outliers(df, col)
outlier_counts[[col]] <- nrow(outliers)
}
# Convert to data frame for easier viewing
outlier_summary <- data.frame(
Column = names(outlier_counts),
Outlier_Count = unlist(outlier_counts)
)
# Sort descending
outlier_summary <- outlier_summary %>%
arrange(desc(Outlier_Count))
# Print full summary
DT::datatable(
outlier_summary,
options = list(pageLength = 100),  # Show 100 rows per page
rownames = TRUE
)
